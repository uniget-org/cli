.docker:
  image: docker:28.3.2@sha256:f341edb0395a4bc8a00629821a5fa48d6c0055d88901b10aac42787d6ba76eae

.docker:dind:
  services:
  - docker:28.3.2-dind@sha256:f341edb0395a4bc8a00629821a5fa48d6c0055d88901b10aac42787d6ba76eae

.regctl:
  image: regclient/regctl:v0.9.0-alpine@sha256:9e5b4ad04dd7ee9b37b360289231eb4ebadfe3a72f3ddaa1cd6a585efb6d1e4c

.docker:login:
  before_script:
  - |
    echo "${CI_REGISTRY_PASSWORD}" \
    | docker login "${CI_REGISTRY}" \
        --username "${CI_REGISTRY_USER}" \
        --password-stdin

.regctl-login:
  before_script:
  - |
    echo "${CI_REGISTRY_PASSWORD}" \
    | regctl registry login "${CI_REGISTRY}" \
        --user "${CI_REGISTRY_USER}" \
        --pass-stdin

.docker:build:
  extends:
  - .docker
  - .docker:dind
  - .docker:login
  script:
  - |
    apk add --update-cache \
        jq
  - |
    SOURCE_DATE_EPOCH="$( git log -1 --pretty=%ct "${BUILD_CONTEXT}/Dockerfile" )"
    export SOURCE_DATE_EPOCH
  - |
    echo "### Building image ${CI_REGISTRY_IMAGE}:${TAG}-${ARCH}"
    echo "    Architecture:     ${ARCH}"
    echo "    Build context:    ${BUILD_CONTEXT}"
    echo "    Using build args: ${BUILD_ARGS}"
    echo "    Pushing image:    ${PUSH}"
    for BUILD_ARG in ${BUILD_ARGS}; do
        BUILD_ARG_PARAMETERS="${BUILD_ARG_PARAMETERS} --build-arg=${BUILD_ARG}"
    done
    docker buildx build "${BUILD_CONTEXT}" \
        ${BUILD_ARG_PARAMETERS} \
        ${BUILD_EXTRA_ARGS} \
        --platform="linux/${ARCH}" \
        --cache-to=type=inline,mode=min \
        --cache-from=type=registry,ref="${CI_REGISTRY_IMAGE}:${TAG}${TAG_SUFFIX}-${ARCH}" \
        --tag="${CI_REGISTRY_IMAGE}:${TAG}${TAG_SUFFIX}-${ARCH}" \
        --metadata-file=metadata-${TAG}${TAG_SUFFIX}-${ARCH}.json \
        --push="${PUSH}"
  - |
    jq --raw-output '."containerimage.digest"' metadata-${TAG}${TAG_SUFFIX}-${ARCH}.json >image-digest-${TAG}${TAG_SUFFIX}-${ARCH}.json
  artifacts:
    paths:
    - metadata-${TAG}${TAG_SUFFIX}-${ARCH}.json
    - image-digest-${TAG}${TAG_SUFFIX}-${ARCH}.json

.build:multi_arch_index:
  extends:
  - .regctl
  - .regctl-login
  script:
  - |
    echo "### Building index for ${CI_REGISTRY_IMAGE}:${TAG}"
  - |
    DIGEST_AMD64="$( cat image-digest-${TAG}${TAG_SUFFIX}-amd64.json )"
    DIGEST_ARM64="$( cat image-digest-${TAG}${TAG_SUFFIX}-arm64.json )"
    echo "    Digest amd64: ${DIGEST_AMD64}"
    echo "    Digest arm64: ${DIGEST_ARM64}"
  - |
    echo "### Creating multi-arch image index for ${CI_REGISTRY_IMAGE}:${TAG}${TAG_SUFFIX}"
    regctl index create "${CI_REGISTRY_IMAGE}:${TAG}${TAG_SUFFIX}" \
        --format='{{json .Manifest}}' \
        --ref="${CI_REGISTRY_IMAGE}:${TAG}${TAG_SUFFIX}-amd64@${DIGEST_AMD64}" \
        --ref="${CI_REGISTRY_IMAGE}:${TAG}${TAG_SUFFIX}-arm64@${DIGEST_ARM64}" \
    | tr -d '\n' \
    >index-digest-${TAG}${TAG_SUFFIX}.json
  artifacts:
    paths:
    - index-digest-${TAG}${TAG_SUFFIX}.json

.build:rules:
  rules:
  - if: $CI_COMMIT_TAG =~ /^v/
    variables:
      PUSH: "true"
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    changes:
    - Dockerfile
    variables:
      PUSH: "false"
  - if: $CI_PIPELINE_SOURCE == "web"
    variables:
      PUSH: "true"
  - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULED_JOB == "daily_rebuild"
    variables:
      PUSH: "true"

lint:
  rules:
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF == $CI_DEFAULT_BRANCH
  extends:
  - .docker
  - .docker:dind
  script: |
    docker buildx bake lint

test:
  rules:
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF == $CI_DEFAULT_BRANCH
  extends:
  - .docker
  - .docker:dind
  script: |
    docker buildx bake test

cli_test:
  rules:
  - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF == $CI_DEFAULT_BRANCH
  extends:
  - .docker
  - .docker:dind
  script: |
    docker buildx bake cli-test

release:
  extends:
  - .docker
  - .docker:dind
  rules:
  - if: $CI_COMMIT_TAG =~ /^v/
  id_tokens:
    SIGSTORE_ID_TOKEN:
      aud: sigstore
  variables:
    GIT_DEPTH: 0
  script: |
    docker buildx build \
        --target=publish-gitlab \
        --build-arg=GITLAB_TOKEN \
        --build-arg=SIGSTORE_ID_TOKEN \
        .

prepare:
  extends:
  - .build:rules
  variables:
    GIT_DEPTH: 0
  script: |
    version="$( git describe --tags --abbrev=0 | tr -d v )"
    TAG="${version}"

    echo "Found version: ${version}"

    echo "version=${version}" >>build.env
    echo "TAG=${TAG}" >>build.env
  artifacts:
    reports:
      dotenv: build.env

build:image:
  needs:
  - prepare
  parallel:
    matrix:
    - ARCH:
      - "amd64"
      - "arm64"
      BUILD_EXTRA_ARGS: "--target=noble-uniget"
      TAG_SUFFIX: "-noble"
    - ARCH:
      - "amd64"
      - "arm64"
      BUILD_EXTRA_ARGS: "--target=systemd-uniget"
      TAG_SUFFIX: "-noble-systemd"
  extends:
  - .build:rules
  - .docker:build
  variables:
    BUILD_CONTEXT: .
    BUILD_ARGS: version
  tags:
  - saas-linux-medium-${ARCH}

build:index:
  needs:
  - prepare
  - build:image
  parallel:
    matrix:
    - TAG_SUFFIX:
      - "-noble"
      - "-noble-systemd"
  extends:
  - .build:rules
  - .build:multi_arch_index

clean:intermediate_tags:
  needs:
  - prepare
  - build:image
  - build:index
  parallel:
    matrix:
    - TAG_SUFFIX:
      - "noble"
      - "noble-systemd"
  extends:
  - .build:rules
  - .regctl
  - .regctl-login
  script:
  - |
    echo "### Removing intermediate tags for ${CI_REGISTRY_IMAGE}:${TAG}"
  - |
    DIGEST_AMD64="$( cat image-digest-${TAG}${TAG_SUFFIX}-amd64.json )"
    DIGEST_ARM64="$( cat image-digest-${TAG}${TAG_SUFFIX}-arm64.json )"
    echo "    Digest amd64: ${DIGEST_AMD64}"
    echo "    Digest arm64: ${DIGEST_ARM64}"
  - |
    regctl manifest delete "${CI_REGISTRY_IMAGE}:${TAG}${TAG_SUFFIX}-amd64@${DIGEST_AMD64}"
    regctl manifest delete "${CI_REGISTRY_IMAGE}:${TAG}${TAG_SUFFIX}-arm64@${DIGEST_ARM64}"

update:default_tag:
  needs:
  - prepare
  - build:index
  parallel:
    matrix:
    - TAG_SUFFIX:
      - "noble"
      - "noble-systemd"
  extends:
  - .build:rules
  - .regctl
  - .regctl-login
  script:
  - |
    regctl image copy \
        "${CI_REGISTRY_IMAGE}:${TAG}-${TAG_SUFFIX}" \
        "${CI_REGISTRY_IMAGE}:${TAG_SUFFIX}"

update:latest_tag:
  needs:
  - prepare
  - build:index
  extends:
  - .build:rules
  - .regctl
  - .regctl-login
  script:
  - |
    regctl image copy \
        "${CI_REGISTRY_IMAGE}:${TAG}-noble" \
        "${CI_REGISTRY_IMAGE}:latest"
