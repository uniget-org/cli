name: Release

on:
  workflow_run:
    workflows:
      - "Test-Linux"
    types:
      - completed

jobs:

  prepare:
    name: Prepare
    if: ${{ github.event.workflow_run.conclusion == 'success' && startsWith(github.event.workflow_run.head_branch, 'v') }}
    runs-on: ubuntu-20.04
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      branch: ${{ steps.get_version.outputs.branch }}
      prerelease: ${{ steps.get_version.outputs.prerelease }}
      tools: ${{ steps.dockerfile.outputs.tools }}
      tool_count: ${{ steps.dockerfile.outputs.count }}
    steps:

      - name: Install tools
        env:
          SEMVER_VERSION: 3.3.0
        run: |
          curl --silent --location --output /usr/local/bin/semver "https://github.com/fsaintjacques/semver-tool/raw/${SEMVER_VERSION}/src/semver"
          chmod +x /usr/local/bin/semver

      - name: Get version
        id: get_version
        run: |
          VERSION="$(jq --raw-output '.workflow_run.head_branch' "${GITHUB_EVENT_PATH}")"; \
          echo "::set-output name=version::${VERSION#v}"; \
          echo "::set-output name=branch::v$(semver get major "${VERSION}").$(semver get minor "${VERSION}")"; \
          echo "::set-output name=prerelease::$(if test "$(semver get prerel "${VERSION}")" == ""; then echo false; else echo true; fi)"

      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: v${{ steps.get_version.outputs.version }}

  build:
    name: Build images
    needs:
    - prepare
    if: ${{ github.event.workflow_run.conclusion == 'success' && startsWith(github.event.workflow_run.head_branch, 'v') }}
    runs-on: ubuntu-20.04
    steps:

      - name: Install tools
        env:
          SHELLCHECK_VERSION: 0.8.0
          YQ_VERSION: 4.21.1
        run: |
          curl -sL "https://github.com/koalaman/shellcheck/releases/download/v${SHELLCHECK_VERSION}/shellcheck-v${SHELLCHECK_VERSION}.linux.x86_64.tar.xz" \
          | tar -xJC /usr/local/bin/ --strip-components=1 "shellcheck-v${SHELLCHECK_VERSION}/shellcheck"
          curl --silent --location --output /usr/local/bin/yq "https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64"

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: v${{ needs.prepare.outputs.version }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry as ${{ secrets.BOT_USERNAME }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.BOT_USERNAME }}
          password: ${{ secrets.BOT_PACKAGES_TOKEN }}

      - name: Build
        run: |
          make push

  release:
    name: Release
    needs:
    - prepare
    if: ${{ github.event.workflow_run.conclusion == 'success' && startsWith(github.event.workflow_run.head_branch, 'v') }}
    runs-on: ubuntu-20.04
    steps:

      - name: Install tools
        env:
          SHELLCHECK_VERSION: 0.8.0
          YQ_VERSION: 4.21.1
        run: |
          curl -sL "https://github.com/koalaman/shellcheck/releases/download/v${SHELLCHECK_VERSION}/shellcheck-v${SHELLCHECK_VERSION}.linux.x86_64.tar.xz" \
          | tar -xJC /usr/local/bin/ --strip-components=1 "shellcheck-v${SHELLCHECK_VERSION}/shellcheck"
          curl --silent --location --output /usr/local/bin/yq "https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64"

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: v${{ needs.prepare.outputs.version }}

      - name: Shellcheck
        run: |
          shellcheck docker-setup

      - name: Set version
        run: |
          sed -i 's/^docker_setup_version="main"$/docker_setup_version=${{ needs.prepare.outputs.version }}/' docker-setup

      - name: Create checksum
        run: |
          sha256sum docker-setup >docker-setup.sha256

      - name: Create changelog
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_GITHUB_TOKEN }}
        run: |
          LATEST_RELEASE_PUBLISHED="$(
              curl "${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/releases/latest" \
                  --silent \
                  --user "github-ci-token:${GITHUB_TOKEN}" \
              | jq --raw-output '.published_at'
          )"
          echo "Latest release was published at ${LATEST_RELEASE_PUBLISHED}."
          echo "## Installation instructions" >>body.txt
          echo >>body.txt
          echo '```bash' >>body.txt
          echo "curl --silent --location --output /usr/local/bin/docker-setup https://github.com/${GITHUB_REPOSITORY}/releases/download/v${{ needs.prepare.outputs.version }}/docker-setup" >>body.txt
          echo "chmod +x /usr/local/bin/docker-setup" >>body.txt
          echo "docker-setup --plan" >>body.txt
          echo "source <(docker-setup --bash-completion)" >>body.txt
          echo '```' >>body.txt
          echo >>body.txt
          echo "## Closed issues and pull requests" >>body.txt
          echo >>body.txt
          hub issue \
              --state closed \
              --include-pulls \
              --since "${LATEST_RELEASE_PUBLISHED}" \
              --format "- %t ([%i](%U))%n" \
              >>body.txt
          cat body.txt

      - name: Create release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.BOT_GITHUB_TOKEN }}
          allowUpdates: true
          name: "Version ${{ needs.prepare.outputs.version }}"
          tag: v${{ needs.prepare.outputs.version }}
          draft: false
          bodyFile: body.txt
          prerelease: ${{ needs.prepare.outputs.prerelease }}
          replacesArtifacts: true
          artifacts: "docker-setup,docker-setup.sha256,tools.json,tools.json.sha256"
