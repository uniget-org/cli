name: Release

on:
  push:
    tags:
      - "v*"
  pull_request:
    types:
      - opened
      - synchronize
      - labeled
      - reopened

jobs:

  test:
    name: Tests
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        distro:
          - alpine-3.15
          #- amazonlinux-2
          #- archlinux
          #- clearlinux
          #- centos-7
          #- centos-8
          - debian-11
          - fedora-35
          #- opensuse-leap-15
          #- opensuse-tumbleweed
          #- rockylinux-8
          - ubuntu-20.04
          - ubuntu-21.04
    steps:

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Test
        env:
          DOCKER_BUILDKIT: 1
          TERM: xterm
          IS_PR: ${{ github.event_name == 'pull_request }}
        run: |
          docker build --tag test --file test/Dockerfile.${{ matrix.distro }} .; \
          mkdir -p "${PWD}/log"; \
          docker run --interactive --rm --privileged --env TERM --env Europe/Berlin --volume "${PWD}/log:/var/log" test bash test.sh "$(if ${IS_PR}; then echo "--skip-docs"; fi)"

      - name: Store logs
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: logs-${{ matrix.distro }}.zip
          path: log/**

  release:
    name: Release
    needs:
      - test
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-20.04
    steps:

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Shellcheck
        env:
          SHELLCHECK_VERSION: 0.8.0
        run: |
          curl -sL https://github.com/koalaman/shellcheck/releases/download/v${SHELLCHECK_VERSION}/shellcheck-v${SHELLCHECK_VERSION}.linux.x86_64.tar.xz \
          | tar -xJ --strip-components=1 shellcheck-v${SHELLCHECK_VERSION}/shellcheck && \
          ./shellcheck docker-setup.sh

      - name: Get version
        id: get_version
        run: echo ::set-output name=version::${GITHUB_REF/refs\/tags\/v/}

      - name: Set version
        run: |
          sed -i 's/^DOCKER_SETUP_VERSION=main$/DOCKER_SETUP_VERSION=${{ steps.get_version.outputs.version }}/' docker-setup.sh

      - name: Create checksum
        run: |
          sha256sum docker-setup.sh >docker-setup.sh.sha256

      - name: Prepare contrib tarball
        run: |
          tar -czf contrib.tar.gz contrib && \
          sha256sum contrib.tar.gz >contrib.tar.gz.sha256

      - name: Create changelog
        run: |
          docker run --volume "${PWD}:/usr/local/src/your-app" \
              githubchangeloggenerator/github-changelog-generator \
              --user nicholasdille \
              --project docker-setup \
              --token ${{ secrets.BOT_GITHUB_TOKEN }} && \
          docker run --volume "${PWD}:/opt" \
              sean0x42/markdown-extract:v2 \
              v${{ steps.get_version.outputs.version }} \
              /opt/CHANGELOG.md \
              >v${{ steps.get_version.outputs.version }}.md

      - name: Create release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.BOT_GITHUB_TOKEN }}
          allowUpdates: true
          name: "Version ${{ steps.get_version.outputs.version }}"
          tag: v${{ steps.get_version.outputs.version }}
          draft: false
          bodyFile: v${{ steps.get_version.outputs.version }}.md
          prerelease: false
          replacesArtifacts: true
          artifacts: "docker-setup.sh,docker-setup.sh.sha256,contrib.tar.gz,contrib.tar.gz.sha256"

  image:
    name: docker-build
    needs:
      - test
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ${{ secrets.docker_hub_username }}/docker-setup
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Docker meta
      id: docker_meta
      uses: docker/metadata-action@v3
      with:
        images: ${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=tag
          type=ref,event=pr
          type=edge
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      #if: github.event_name != 'pull_request'
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.docker_hub_username }}
        password: ${{ secrets.docker_hub_token }}

    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        cache-from: ${{ env.IMAGE_NAME }}:${{ steps.docker_meta.outputs.version }}
        push: true # ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.docker_meta.outputs.tags }}
        labels: ${{ steps.docker_meta.outputs.labels }}

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.IMAGE_NAME }}:${{ steps.docker_meta.outputs.version }}
        ignore-unfixed: true
        format: 'template'
        template: '@/contrib/sarif.tpl'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: 'trivy-results.sarif'
