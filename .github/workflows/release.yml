name: Release

on:
  workflow_run:
    workflows:
      - "Test-Linux"
    types:
      - completed

jobs:

#  check:
#    name: Check
#    if: ${{ github.event.workflow_run.conclusion == 'success' }}
#    runs-on: ubuntu-20.04
#    steps:
#
#      - name: Check
#        run: |
#          jq . "${GITHUB_EVENT_PATH}"

  release:
    name: Release
    if: ${{ github.event.workflow_run.conclusion == 'success' && startsWith(github.event.workflow_run.head_branch, 'v') }}
    runs-on: ubuntu-20.04
    steps:

      - name: Install tools
        env:
          SEMVER_VERSION: 3.3.0
          SHELLCHECK_VERSION: 0.8.0
        run: |
          curl -sLo /usr/local/bin/semver "https://github.com/fsaintjacques/semver-tool/raw/${SEMVER_VERSION}/src/semver"
          chmod +x /usr/local/bin/semver
          curl -sL "https://github.com/koalaman/shellcheck/releases/download/v${SHELLCHECK_VERSION}/shellcheck-v${SHELLCHECK_VERSION}.linux.x86_64.tar.xz" \
          | tar -xJC /usr/local/bin/ --strip-components=1 "shellcheck-v${SHELLCHECK_VERSION}/shellcheck"

      - name: Get version
        id: get_version
        run: |
          VERSION="$(jq --raw-output '.workflow_run.head_branch' "${GITHUB_EVENT_PATH}")"; \
          echo "::set-output name=version::${VERSION}"; \
          echo "::set-output name=prerelease::$(if test "$(semver get prerel "${VERSION}")" == ""; then echo false; else echo true; fi)"

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.get_version.outputs.version }}
          fetch-depth: '0'

      - name: Shellcheck
        run: |
          shellcheck docker-setup.sh

      - name: Set version
        run: |
          sed -i 's/^DOCKER_SETUP_VERSION=main$/DOCKER_SETUP_VERSION=${{ steps.get_version.outputs.version }}/' docker-setup.sh

      - name: Create checksum
        run: |
          sha256sum docker-setup.sh >docker-setup.sh.sha256

      - name: Prepare contrib tarball
        run: |
          tar -czf contrib.tar.gz contrib && \
          sha256sum contrib.tar.gz >contrib.tar.gz.sha256

      - name: Create changelog
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_GITHUB_TOKEN }}
        run: |
          LATEST_RELEASE_PUBLISHED="$(
              curl "${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/releases/latest" \
                  --silent \
                  --user "github-ci-token:${GITHUB_TOKEN}" \
              | jq --raw-output '.published_at'
          )"
          echo "Latest release was published at ${LATEST_RELEASE_PUBLISHED}."
          echo "Closed issues and pull requests:" >>body.txt
          echo >>body.txt
          hub issue \
              --state closed \
              --include-pulls \
              --since "${LATEST_RELEASE_PUBLISHED}" \
              --format "%t ([%i](%U))%n" \
              >>body.txt

      - name: Create release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.BOT_GITHUB_TOKEN }}
          allowUpdates: true
          name: "Version ${{ steps.get_version.outputs.version }}"
          tag: ${{ steps.get_version.outputs.version }}
          draft: false
          bodyFile: body.txt
          prerelease: ${{ steps.get_version.outputs.prerelease }}
          replacesArtifacts: true
          artifacts: "docker-setup.sh,docker-setup.sh.sha256,contrib.tar.gz,contrib.tar.gz.sha256"

  image:
    name: docker-build
    if: ${{ github.event.workflow_run.conclusion == 'success' && startsWith(github.event.workflow_run.head_branch, 'v') }}
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ${{ secrets.docker_hub_username }}/docker-setup
    steps:

    - name: Get version
      id: get_version
      run: |
        echo ::set-output name=version::$(jq --raw-output '.workflow_run.head_branch' "${GITHUB_EVENT_PATH}")

    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: ${{ steps.get_version.outputs.version }}

    - name: Docker meta
      id: docker_meta
      uses: docker/metadata-action@v3
      with:
        images: ${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}},value=${{ steps.get_version.outputs.version }}
          type=semver,pattern={{major}}.{{minor}},value=${{ steps.get_version.outputs.version }}
          type=semver,pattern={{major}},value=${{ steps.get_version.outputs.version }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.docker_hub_username }}
        password: ${{ secrets.docker_hub_token }}

    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        cache-from: ${{ env.IMAGE_NAME }}:${{ steps.docker_meta.outputs.version }}
        push: true
        tags: ${{ steps.docker_meta.outputs.tags }}
        labels: ${{ steps.docker_meta.outputs.labels }}

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.2.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        image-ref: ${{ env.IMAGE_NAME }}:${{ steps.docker_meta.outputs.version }}
        ignore-unfixed: true
        format: 'template'
        template: '@/contrib/sarif.tpl'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: 'trivy-results.sarif'
