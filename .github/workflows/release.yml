name: Release

on:
  workflow_run:
    workflows:
      - "Test-Linux"
    types:
      - completed

jobs:

  check:
    name: Check
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-20.04
    steps:

      - name: Check
        run: |
          jq . "${GITHUB_EVENT_PATH}"

  release:
    name: Release
    needs:
    - check
    runs-on: ubuntu-20.04
    steps:

      - name: Get version
        id: get_version
        run: |
          echo ::set-output name=version::$(jq --raw-output '.workflow_run.head_branch' "${GITHUB_EVENT_PATH}")

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.get_version.outputs.version }}

      - name: Shellcheck
        env:
          SHELLCHECK_VERSION: 0.8.0
        run: |
          curl -sL https://github.com/koalaman/shellcheck/releases/download/v${SHELLCHECK_VERSION}/shellcheck-v${SHELLCHECK_VERSION}.linux.x86_64.tar.xz \
          | tar -xJ --strip-components=1 shellcheck-v${SHELLCHECK_VERSION}/shellcheck && \
          ./shellcheck docker-setup.sh

      - name: Set version
        run: |
          sed -i 's/^DOCKER_SETUP_VERSION=main$/DOCKER_SETUP_VERSION=${{ steps.get_version.outputs.version }}/' docker-setup.sh

      - name: Create checksum
        run: |
          sha256sum docker-setup.sh >docker-setup.sh.sha256

      - name: Prepare contrib tarball
        run: |
          tar -czf contrib.tar.gz contrib && \
          sha256sum contrib.tar.gz >contrib.tar.gz.sha256

      - name: Create changelog
        run: |
          docker run --volume "${PWD}:/usr/local/src/your-app" \
              githubchangeloggenerator/github-changelog-generator \
              --user nicholasdille \
              --project docker-setup \
              --token ${{ secrets.BOT_GITHUB_TOKEN }} && \
          docker run --volume "${PWD}:/opt" \
              sean0x42/markdown-extract:v2 \
              v${{ steps.get_version.outputs.version }} \
              /opt/CHANGELOG.md \
              >v${{ steps.get_version.outputs.version }}.md

      - name: Create release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.BOT_GITHUB_TOKEN }}
          allowUpdates: true
          name: "Version ${{ steps.get_version.outputs.version }}"
          tag: v${{ steps.get_version.outputs.version }}
          draft: false
          bodyFile: v${{ steps.get_version.outputs.version }}.md
          prerelease: false
          replacesArtifacts: true
          artifacts: "docker-setup.sh,docker-setup.sh.sha256,contrib.tar.gz,contrib.tar.gz.sha256"

  image:
    name: docker-build
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ${{ secrets.docker_hub_username }}/docker-setup
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Docker meta
      id: docker_meta
      uses: docker/metadata-action@v3
      with:
        images: ${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=edge
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.docker_hub_username }}
        password: ${{ secrets.docker_hub_token }}

    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        cache-from: ${{ env.IMAGE_NAME }}:${{ steps.docker_meta.outputs.version }}
        push: true
        tags: ${{ steps.docker_meta.outputs.tags }}
        labels: ${{ steps.docker_meta.outputs.labels }}

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        image-ref: ${{ env.IMAGE_NAME }}:${{ steps.docker_meta.outputs.version }}
        ignore-unfixed: true
        format: 'template'
        template: '@/contrib/sarif.tpl'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: 'trivy-results.sarif'
